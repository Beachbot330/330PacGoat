// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc.team330.robot.commands;

import org.usfirst.frc.team330.robot.Robot;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
/**
 *
 */
public class  SendDefaultSmartDashboardData extends Command {
    public SendDefaultSmartDashboardData() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(drivetrain);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.smartDashboardSender);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        setRunWhenDisabled(true);
    }
    
    int count = 0;
    // Called just before this Command runs the first time
    protected void initialize() {
        SmartDashboard.putNumber("drivetrainX", drivetrainX);
        SmartDashboard.putNumber("drivetrainY", drivetrainY);
        SmartDashboard.putNumber("EncoderLeft", encoderLeft);
        SmartDashboard.putNumber("EncoderRight", encoderRight);
        
        count = 0;
    }
    double pickupCurrent = 0;
    double armPosition = 0;
    double drivetrainX = 0;
    double drivetrainY = 0;
    double gyroAngle = 0;
    double encoderLeft = 0;
    double encoderRight = 0;
    double shooterDistance = 0;
    boolean ballInPickup = false;
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        if (count % 10 == 0)
        {
            if (drivetrainX != Robot.drivetrain.getX()) {
                drivetrainX = Robot.drivetrain.getX();
                 SmartDashboard.putNumber("drivetrainX", drivetrainX);
            }
            if (drivetrainY != Robot.drivetrain.getY()) {
                drivetrainY = Robot.drivetrain.getY();
                SmartDashboard.putNumber("drivetrainY", drivetrainY);
            }
            if (gyroAngle != Robot.drivetrain.getAngle()) {
                gyroAngle = Robot.drivetrain.getAngle();
                SmartDashboard.putNumber("GyroAngle", gyroAngle);
            }
            if (encoderLeft != Robot.drivetrain.getLeftDistance()) {
                encoderLeft = Robot.drivetrain.getLeftDistance();
                SmartDashboard.putNumber("EncoderLeft", encoderLeft);
            }
            if (encoderRight != Robot.drivetrain.getRightDistance()) {
                encoderRight = Robot.drivetrain.getRightDistance();
                SmartDashboard.putNumber("EncoderRight", encoderRight);
            }
        }
        count++;
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }
    // Called once after isFinished returns true
    protected void end() {
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
